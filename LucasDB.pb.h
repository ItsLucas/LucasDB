// Generated by the protocol buffer compiler.  DO NOT EDIT!
// source: LucasDB.proto

#ifndef GOOGLE_PROTOBUF_INCLUDED_LucasDB_2eproto
#define GOOGLE_PROTOBUF_INCLUDED_LucasDB_2eproto

#include <limits>
#include <string>

#include <google/protobuf/port_def.inc>
#if PROTOBUF_VERSION < 3017000
#error This file was generated by a newer version of protoc which is
#error incompatible with your Protocol Buffer headers. Please update
#error your headers.
#endif
#if 3017003 < PROTOBUF_MIN_PROTOC_VERSION
#error This file was generated by an older version of protoc which is
#error incompatible with your Protocol Buffer headers. Please
#error regenerate this file with a newer version of protoc.
#endif

#include <google/protobuf/port_undef.inc>
#include <google/protobuf/io/coded_stream.h>
#include <google/protobuf/arena.h>
#include <google/protobuf/arenastring.h>
#include <google/protobuf/generated_message_table_driven.h>
#include <google/protobuf/generated_message_util.h>
#include <google/protobuf/metadata_lite.h>
#include <google/protobuf/generated_message_reflection.h>
#include <google/protobuf/message.h>
#include <google/protobuf/repeated_field.h>  // IWYU pragma: export
#include <google/protobuf/extension_set.h>  // IWYU pragma: export
#include <google/protobuf/unknown_field_set.h>
// @@protoc_insertion_point(includes)
#include <google/protobuf/port_def.inc>
#define PROTOBUF_INTERNAL_EXPORT_LucasDB_2eproto
PROTOBUF_NAMESPACE_OPEN
namespace internal {
class AnyMetadata;
}  // namespace internal
PROTOBUF_NAMESPACE_CLOSE

// Internal implementation detail -- do not use these members.
struct TableStruct_LucasDB_2eproto {
  static const ::PROTOBUF_NAMESPACE_ID::internal::ParseTableField entries[]
    PROTOBUF_SECTION_VARIABLE(protodesc_cold);
  static const ::PROTOBUF_NAMESPACE_ID::internal::AuxiliaryParseTableField aux[]
    PROTOBUF_SECTION_VARIABLE(protodesc_cold);
  static const ::PROTOBUF_NAMESPACE_ID::internal::ParseTable schema[2]
    PROTOBUF_SECTION_VARIABLE(protodesc_cold);
  static const ::PROTOBUF_NAMESPACE_ID::internal::FieldMetadata field_metadata[];
  static const ::PROTOBUF_NAMESPACE_ID::internal::SerializationTable serialization_table[];
  static const ::PROTOBUF_NAMESPACE_ID::uint32 offsets[];
};
extern const ::PROTOBUF_NAMESPACE_ID::internal::DescriptorTable descriptor_table_LucasDB_2eproto;
namespace lucasdb {
class DBReply;
struct DBReplyDefaultTypeInternal;
extern DBReplyDefaultTypeInternal _DBReply_default_instance_;
class DBRequest;
struct DBRequestDefaultTypeInternal;
extern DBRequestDefaultTypeInternal _DBRequest_default_instance_;
}  // namespace lucasdb
PROTOBUF_NAMESPACE_OPEN
template<> ::lucasdb::DBReply* Arena::CreateMaybeMessage<::lucasdb::DBReply>(Arena*);
template<> ::lucasdb::DBRequest* Arena::CreateMaybeMessage<::lucasdb::DBRequest>(Arena*);
PROTOBUF_NAMESPACE_CLOSE
namespace lucasdb {

// ===================================================================

class DBRequest final :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:lucasdb.DBRequest) */ {
 public:
  inline DBRequest() : DBRequest(nullptr) {}
  ~DBRequest() override;
  explicit constexpr DBRequest(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized);

  DBRequest(const DBRequest& from);
  DBRequest(DBRequest&& from) noexcept
    : DBRequest() {
    *this = ::std::move(from);
  }

  inline DBRequest& operator=(const DBRequest& from) {
    CopyFrom(from);
    return *this;
  }
  inline DBRequest& operator=(DBRequest&& from) noexcept {
    if (this == &from) return *this;
    if (GetOwningArena() == from.GetOwningArena()) {
      InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return default_instance().GetMetadata().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return default_instance().GetMetadata().reflection;
  }
  static const DBRequest& default_instance() {
    return *internal_default_instance();
  }
  static inline const DBRequest* internal_default_instance() {
    return reinterpret_cast<const DBRequest*>(
               &_DBRequest_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    0;

  friend void swap(DBRequest& a, DBRequest& b) {
    a.Swap(&b);
  }
  inline void Swap(DBRequest* other) {
    if (other == this) return;
    if (GetOwningArena() == other->GetOwningArena()) {
      InternalSwap(other);
    } else {
      ::PROTOBUF_NAMESPACE_ID::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(DBRequest* other) {
    if (other == this) return;
    GOOGLE_DCHECK(GetOwningArena() == other->GetOwningArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  inline DBRequest* New() const final {
    return new DBRequest();
  }

  DBRequest* New(::PROTOBUF_NAMESPACE_ID::Arena* arena) const final {
    return CreateMaybeMessage<DBRequest>(arena);
  }
  using ::PROTOBUF_NAMESPACE_ID::Message::CopyFrom;
  void CopyFrom(const DBRequest& from);
  using ::PROTOBUF_NAMESPACE_ID::Message::MergeFrom;
  void MergeFrom(const DBRequest& from);
  private:
  static void MergeImpl(::PROTOBUF_NAMESPACE_ID::Message*to, const ::PROTOBUF_NAMESPACE_ID::Message&from);
  public:
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  ::PROTOBUF_NAMESPACE_ID::uint8* _InternalSerialize(
      ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(DBRequest* other);
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "lucasdb.DBRequest";
  }
  protected:
  explicit DBRequest(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                       bool is_message_owned = false);
  private:
  static void ArenaDtor(void* object);
  inline void RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  public:

  static const ClassData _class_data_;
  const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*GetClassData() const final;

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kKey1FieldNumber = 2,
    kKey2FieldNumber = 3,
    kOpFieldNumber = 1,
  };
  // int64 key1 = 2;
  void clear_key1();
  ::PROTOBUF_NAMESPACE_ID::int64 key1() const;
  void set_key1(::PROTOBUF_NAMESPACE_ID::int64 value);
  private:
  ::PROTOBUF_NAMESPACE_ID::int64 _internal_key1() const;
  void _internal_set_key1(::PROTOBUF_NAMESPACE_ID::int64 value);
  public:

  // int64 key2 = 3;
  void clear_key2();
  ::PROTOBUF_NAMESPACE_ID::int64 key2() const;
  void set_key2(::PROTOBUF_NAMESPACE_ID::int64 value);
  private:
  ::PROTOBUF_NAMESPACE_ID::int64 _internal_key2() const;
  void _internal_set_key2(::PROTOBUF_NAMESPACE_ID::int64 value);
  public:

  // int32 op = 1;
  void clear_op();
  ::PROTOBUF_NAMESPACE_ID::int32 op() const;
  void set_op(::PROTOBUF_NAMESPACE_ID::int32 value);
  private:
  ::PROTOBUF_NAMESPACE_ID::int32 _internal_op() const;
  void _internal_set_op(::PROTOBUF_NAMESPACE_ID::int32 value);
  public:

  // @@protoc_insertion_point(class_scope:lucasdb.DBRequest)
 private:
  class _Internal;

  template <typename T> friend class ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  ::PROTOBUF_NAMESPACE_ID::int64 key1_;
  ::PROTOBUF_NAMESPACE_ID::int64 key2_;
  ::PROTOBUF_NAMESPACE_ID::int32 op_;
  mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  friend struct ::TableStruct_LucasDB_2eproto;
};
// -------------------------------------------------------------------

class DBReply final :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:lucasdb.DBReply) */ {
 public:
  inline DBReply() : DBReply(nullptr) {}
  ~DBReply() override;
  explicit constexpr DBReply(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized);

  DBReply(const DBReply& from);
  DBReply(DBReply&& from) noexcept
    : DBReply() {
    *this = ::std::move(from);
  }

  inline DBReply& operator=(const DBReply& from) {
    CopyFrom(from);
    return *this;
  }
  inline DBReply& operator=(DBReply&& from) noexcept {
    if (this == &from) return *this;
    if (GetOwningArena() == from.GetOwningArena()) {
      InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return default_instance().GetMetadata().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return default_instance().GetMetadata().reflection;
  }
  static const DBReply& default_instance() {
    return *internal_default_instance();
  }
  static inline const DBReply* internal_default_instance() {
    return reinterpret_cast<const DBReply*>(
               &_DBReply_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    1;

  friend void swap(DBReply& a, DBReply& b) {
    a.Swap(&b);
  }
  inline void Swap(DBReply* other) {
    if (other == this) return;
    if (GetOwningArena() == other->GetOwningArena()) {
      InternalSwap(other);
    } else {
      ::PROTOBUF_NAMESPACE_ID::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(DBReply* other) {
    if (other == this) return;
    GOOGLE_DCHECK(GetOwningArena() == other->GetOwningArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  inline DBReply* New() const final {
    return new DBReply();
  }

  DBReply* New(::PROTOBUF_NAMESPACE_ID::Arena* arena) const final {
    return CreateMaybeMessage<DBReply>(arena);
  }
  using ::PROTOBUF_NAMESPACE_ID::Message::CopyFrom;
  void CopyFrom(const DBReply& from);
  using ::PROTOBUF_NAMESPACE_ID::Message::MergeFrom;
  void MergeFrom(const DBReply& from);
  private:
  static void MergeImpl(::PROTOBUF_NAMESPACE_ID::Message*to, const ::PROTOBUF_NAMESPACE_ID::Message&from);
  public:
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  ::PROTOBUF_NAMESPACE_ID::uint8* _InternalSerialize(
      ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(DBReply* other);
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "lucasdb.DBReply";
  }
  protected:
  explicit DBReply(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                       bool is_message_owned = false);
  private:
  static void ArenaDtor(void* object);
  inline void RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  public:

  static const ClassData _class_data_;
  const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*GetClassData() const final;

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kValuesFieldNumber = 3,
    kResultFieldNumber = 4,
  };
  // repeated uint32 values = 3;
  int values_size() const;
  private:
  int _internal_values_size() const;
  public:
  void clear_values();
  private:
  ::PROTOBUF_NAMESPACE_ID::uint32 _internal_values(int index) const;
  const ::PROTOBUF_NAMESPACE_ID::RepeatedField< ::PROTOBUF_NAMESPACE_ID::uint32 >&
      _internal_values() const;
  void _internal_add_values(::PROTOBUF_NAMESPACE_ID::uint32 value);
  ::PROTOBUF_NAMESPACE_ID::RepeatedField< ::PROTOBUF_NAMESPACE_ID::uint32 >*
      _internal_mutable_values();
  public:
  ::PROTOBUF_NAMESPACE_ID::uint32 values(int index) const;
  void set_values(int index, ::PROTOBUF_NAMESPACE_ID::uint32 value);
  void add_values(::PROTOBUF_NAMESPACE_ID::uint32 value);
  const ::PROTOBUF_NAMESPACE_ID::RepeatedField< ::PROTOBUF_NAMESPACE_ID::uint32 >&
      values() const;
  ::PROTOBUF_NAMESPACE_ID::RepeatedField< ::PROTOBUF_NAMESPACE_ID::uint32 >*
      mutable_values();

  // bool result = 4;
  void clear_result();
  bool result() const;
  void set_result(bool value);
  private:
  bool _internal_result() const;
  void _internal_set_result(bool value);
  public:

  // @@protoc_insertion_point(class_scope:lucasdb.DBReply)
 private:
  class _Internal;

  template <typename T> friend class ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  ::PROTOBUF_NAMESPACE_ID::RepeatedField< ::PROTOBUF_NAMESPACE_ID::uint32 > values_;
  mutable std::atomic<int> _values_cached_byte_size_;
  bool result_;
  mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  friend struct ::TableStruct_LucasDB_2eproto;
};
// ===================================================================


// ===================================================================

#ifdef __GNUC__
  #pragma GCC diagnostic push
  #pragma GCC diagnostic ignored "-Wstrict-aliasing"
#endif  // __GNUC__
// DBRequest

// int32 op = 1;
inline void DBRequest::clear_op() {
  op_ = 0;
}
inline ::PROTOBUF_NAMESPACE_ID::int32 DBRequest::_internal_op() const {
  return op_;
}
inline ::PROTOBUF_NAMESPACE_ID::int32 DBRequest::op() const {
  // @@protoc_insertion_point(field_get:lucasdb.DBRequest.op)
  return _internal_op();
}
inline void DBRequest::_internal_set_op(::PROTOBUF_NAMESPACE_ID::int32 value) {
  
  op_ = value;
}
inline void DBRequest::set_op(::PROTOBUF_NAMESPACE_ID::int32 value) {
  _internal_set_op(value);
  // @@protoc_insertion_point(field_set:lucasdb.DBRequest.op)
}

// int64 key1 = 2;
inline void DBRequest::clear_key1() {
  key1_ = int64_t{0};
}
inline ::PROTOBUF_NAMESPACE_ID::int64 DBRequest::_internal_key1() const {
  return key1_;
}
inline ::PROTOBUF_NAMESPACE_ID::int64 DBRequest::key1() const {
  // @@protoc_insertion_point(field_get:lucasdb.DBRequest.key1)
  return _internal_key1();
}
inline void DBRequest::_internal_set_key1(::PROTOBUF_NAMESPACE_ID::int64 value) {
  
  key1_ = value;
}
inline void DBRequest::set_key1(::PROTOBUF_NAMESPACE_ID::int64 value) {
  _internal_set_key1(value);
  // @@protoc_insertion_point(field_set:lucasdb.DBRequest.key1)
}

// int64 key2 = 3;
inline void DBRequest::clear_key2() {
  key2_ = int64_t{0};
}
inline ::PROTOBUF_NAMESPACE_ID::int64 DBRequest::_internal_key2() const {
  return key2_;
}
inline ::PROTOBUF_NAMESPACE_ID::int64 DBRequest::key2() const {
  // @@protoc_insertion_point(field_get:lucasdb.DBRequest.key2)
  return _internal_key2();
}
inline void DBRequest::_internal_set_key2(::PROTOBUF_NAMESPACE_ID::int64 value) {
  
  key2_ = value;
}
inline void DBRequest::set_key2(::PROTOBUF_NAMESPACE_ID::int64 value) {
  _internal_set_key2(value);
  // @@protoc_insertion_point(field_set:lucasdb.DBRequest.key2)
}

// -------------------------------------------------------------------

// DBReply

// repeated uint32 values = 3;
inline int DBReply::_internal_values_size() const {
  return values_.size();
}
inline int DBReply::values_size() const {
  return _internal_values_size();
}
inline void DBReply::clear_values() {
  values_.Clear();
}
inline ::PROTOBUF_NAMESPACE_ID::uint32 DBReply::_internal_values(int index) const {
  return values_.Get(index);
}
inline ::PROTOBUF_NAMESPACE_ID::uint32 DBReply::values(int index) const {
  // @@protoc_insertion_point(field_get:lucasdb.DBReply.values)
  return _internal_values(index);
}
inline void DBReply::set_values(int index, ::PROTOBUF_NAMESPACE_ID::uint32 value) {
  values_.Set(index, value);
  // @@protoc_insertion_point(field_set:lucasdb.DBReply.values)
}
inline void DBReply::_internal_add_values(::PROTOBUF_NAMESPACE_ID::uint32 value) {
  values_.Add(value);
}
inline void DBReply::add_values(::PROTOBUF_NAMESPACE_ID::uint32 value) {
  _internal_add_values(value);
  // @@protoc_insertion_point(field_add:lucasdb.DBReply.values)
}
inline const ::PROTOBUF_NAMESPACE_ID::RepeatedField< ::PROTOBUF_NAMESPACE_ID::uint32 >&
DBReply::_internal_values() const {
  return values_;
}
inline const ::PROTOBUF_NAMESPACE_ID::RepeatedField< ::PROTOBUF_NAMESPACE_ID::uint32 >&
DBReply::values() const {
  // @@protoc_insertion_point(field_list:lucasdb.DBReply.values)
  return _internal_values();
}
inline ::PROTOBUF_NAMESPACE_ID::RepeatedField< ::PROTOBUF_NAMESPACE_ID::uint32 >*
DBReply::_internal_mutable_values() {
  return &values_;
}
inline ::PROTOBUF_NAMESPACE_ID::RepeatedField< ::PROTOBUF_NAMESPACE_ID::uint32 >*
DBReply::mutable_values() {
  // @@protoc_insertion_point(field_mutable_list:lucasdb.DBReply.values)
  return _internal_mutable_values();
}

// bool result = 4;
inline void DBReply::clear_result() {
  result_ = false;
}
inline bool DBReply::_internal_result() const {
  return result_;
}
inline bool DBReply::result() const {
  // @@protoc_insertion_point(field_get:lucasdb.DBReply.result)
  return _internal_result();
}
inline void DBReply::_internal_set_result(bool value) {
  
  result_ = value;
}
inline void DBReply::set_result(bool value) {
  _internal_set_result(value);
  // @@protoc_insertion_point(field_set:lucasdb.DBReply.result)
}

#ifdef __GNUC__
  #pragma GCC diagnostic pop
#endif  // __GNUC__
// -------------------------------------------------------------------


// @@protoc_insertion_point(namespace_scope)

}  // namespace lucasdb

// @@protoc_insertion_point(global_scope)

#include <google/protobuf/port_undef.inc>
#endif  // GOOGLE_PROTOBUF_INCLUDED_GOOGLE_PROTOBUF_INCLUDED_LucasDB_2eproto
